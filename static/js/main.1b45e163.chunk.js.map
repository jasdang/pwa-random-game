{"version":3,"sources":["actions.js","selectors.js","App.js","reducers.js","store.js","serviceWorker.js","index.js"],"names":["createActions","updateMin","updateMax","toggleRunning","reset","getGuessingResult","state","guessingGame","result","getGuessingMin","min","getGuessingMax","max","getGuessingIsRunning","isRunning","AppContainer","styled","div","Header","Box","BoxContent","Flex","Button","button","connect","dispatch","guess","type","id","onClick","evt","parseInt","document","getElementById","value","alert","initialStore","handleActions","payload","Math","floor","random","reducers","combineReducers","nextGame","action","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1b45e163.chunk.js","sourcesContent":["import {createActions} from 'redux-actions';\n\nexport const {updateMin, updateMax, toggleRunning, reset} = createActions(\n  'UPDATE_MIN',\n  'UPDATE_MAX',\n  'TOGGLE_RUNNING',\n  'RESET'\n);\n","export const getGuessingResult = (state) => state.guessingGame.result;\nexport const getGuessingMin = (state) => state.guessingGame.min;\nexport const getGuessingMax = (state) => state.guessingGame.max;\nexport const getGuessingIsRunning = (state) => state.guessingGame.isRunning;\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport styled from 'styled-components';\nimport {updateMin, updateMax, toggleRunning, reset} from './actions';\nimport {\n  getGuessingResult,\n  getGuessingMin,\n  getGuessingMax,\n  getGuessingIsRunning,\n} from './selectors';\n\nconst AppContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  width: 100vw;\n  margin: 0 auto;\n  background-color: blue;\n  @media screen and (min-width: 376px) {\n    width: 376px;\n  }\n`;\n\nconst Header = styled.div`\n  font-size: 2rem;\n  width: fit-content;\n  margin: 0 auto;\n  padding: 1rem 0;\n`;\n\nconst Box = styled.div`\n  background: green;\n  width: 80%;\n  margin: 0 auto;\n  margin: 2rem auto;\n  font-size: 8rem;\n  position: relative;\n  &:after {\n    padding-bottom: 100%;\n    content: '';\n    display: block;\n  }\n`;\n\nconst BoxContent = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Flex = styled.div`\n  display: flex;\n  width: 80%;\n  margin: 1rem auto;\n  justify-content: space-around;\n`;\n\nconst Button = styled.button`\n  display: block;\n  width: 80%;\n  height: 3rem;\n  margin: auto auto;\n`;\n\nfunction App({\n  result,\n  min,\n  max,\n  isRunning,\n  updateMin,\n  updateMax,\n  toggleRunning,\n  reset,\n}) {\n  const handleSubmit = (evt) => {\n    const guess = parseInt(document.getElementById('guess').value);\n    if (guess > max || guess < min) {\n      alert('Input is outside of current range!');\n    } else if (guess === result) {\n      toggleRunning();\n      alert('You won!');\n    } else {\n      guess > result ? updateMax(guess) : updateMin(guess);\n    }\n  };\n  const handleReset = () => {\n    reset();\n  };\n  return (\n    <AppContainer>\n      <Header>Random Game</Header>\n      <Header>Guessing Game</Header>\n      <Box>\n        <BoxContent>?</BoxContent>\n      </Box>\n      <Flex>Current Range: {`${min} < ? < ${max}`}</Flex>\n      <Flex>\n        <p>Your guess </p>\n        <input type='number' min={min} max={max} id='guess' />\n      </Flex>\n      <Button onClick={isRunning ? handleSubmit : handleReset}>\n        {isRunning ? 'Submit' : 'Play Again!'}\n      </Button>\n    </AppContainer>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  result: getGuessingResult(state),\n  min: getGuessingMin(state),\n  max: getGuessingMax(state),\n  isRunning: getGuessingIsRunning(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateMin: (guess) => dispatch(updateMin(guess)),\n  updateMax: (guess) => dispatch(updateMax(guess)),\n  toggleRunning: () => dispatch(toggleRunning()),\n  reset: () => dispatch(reset()),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {combineReducers} from 'redux';\nimport {handleActions} from 'redux-actions';\nimport {updateMin, updateMax, toggleRunning, reset} from './actions';\n\nexport const initialStore = {\n  guessingGame: {\n    result: 50,\n    min: 0,\n    max: 100,\n    isRunning: true,\n  },\n};\n\nconst guessingGame = handleActions(\n  {\n    [updateMin]: (state, {payload}) => {\n      return {\n        ...state,\n        min: payload,\n      };\n    },\n    [updateMax]: (state, {payload}) => {\n      return {\n        ...state,\n        max: payload,\n      };\n    },\n    [toggleRunning]: (state) => {\n      return {\n        ...state,\n        isRunning: !state.isRunning,\n      };\n    },\n    [reset]: (state) => {\n      return {\n        ...state,\n        result: Math.floor(Math.random() * 101),\n        min: 0,\n        max: 100,\n        isRunning: true,\n      };\n    },\n  },\n  initialStore\n);\n\nconst nextGame = (state = [], action) => {\n  const {type} = action;\n  switch (type) {\n    default:\n      return state;\n  }\n};\n\nconst reducers = combineReducers({guessingGame, nextGame});\nexport default reducers;\n","import {createStore} from 'redux';\nimport reducers from './reducers';\nimport {initialStore} from './reducers';\n\nconst store = createStore(\n  reducers,\n  initialStore,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './store';\nimport {Provider} from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}